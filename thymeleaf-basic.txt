타임리프 특징
- 서버 사이드 HTML 렌더링 (SSR)
- 네츄럴 템플릿
 HTML을 그대로 유지하면서 뷰 템플릿도 사용할 수 있음
- 스프링 통합 지원

타임리프 선언
```<html xmlns:th="http://www.thymeleaf.org">```
```
• 간단한 표현:
◦ 변수 표현식: ${...}
◦ 선택 변수 표현식: *{...}
◦ 메시지 표현식: #{...}
◦ 링크 URL 표현식: @{...}
◦ 조각 표현식: ~{...}
• 리터럴
◦ 텍스트: 'one text', 'Another one!',…
◦ 숫자: 0, 34, 3.0, 12.3,…
◦ 불린: true, false
◦ 널: null
◦ 리터럴 토큰: one, sometext, main,…
• 문자 연산:
◦ 문자 합치기: +
◦ 리터럴 대체: |The name is ${name}|
• 산술 연산:
◦ Binary operators: +, -, *, /, %
◦ Minus sign (unary operator): -
• 불린 연산:
◦ Binary operators: and, or
◦ Boolean negation (unary operator): !, not
• 비교와 동등:
◦ 비교: >, <, >=, <= (gt, lt, ge, le)
◦ 동등 연산: ==, != (eq, ne)
• 조건 연산:
◦ If-then: (if) ? (then)
◦ If-then-else: (if) ? (then) : (else)
◦ Default: (value) ?: (defaultvalue)
• 특별한 토큰:
◦ No-Operation:
```

## 텍스트

``` <span th:text="${data}"> ```

<span> [[${data}]] </span>

## Escape
*HTML Entity*
태그 같은 걸 태그의 시작이 아니라 문자로 표현하는,
HTML에서 사용하는 특수 문자를 HTML 엔티티로
변경하는 것을 escape라 한다. 타임리프가 제공하는
텍스트 속성은 기본적으로 이스케이프를 제공한다.
그러니깐, 특수문자를 문자그대로 나타내는 행위를
escape라고 말한다.

웬만하면 escape 그대로 하고 필요할때만 unescape

## 변수 - SpringEL
${...}

jsp에서 사용하던 el은 애초에 적용이 안된다 html이라 그런가?
태그 밖에 사용하는 el.

### 지역 변수
```<div th:with="first=${users[0]}">```

## 영역 객체

```
${#request}
 HttpServletRequest 객체가 그대로 제공
${#response}
${#session}
${#servletContext}
${#locale}
```

```
HTTP 요청 파라미터 접근: param
예) ${param.paramData}
HTTP 세션 접근: session
예) ${session.sessionData}
스프링 빈 접근: @
예) ${@helloBean.hello('Spring!')}
```

## 유틸리티 객체와 날짜

```
#message : 메시지, 국제화 처리
#uris : URI 이스케이프 지원
#dates : java.util.Date 서식 지원
#calendars : java.util.Calendar 서식 지원
#temporals : 자바8 날짜 서식 지원
#numbers : 숫자 서식 지원
#strings : 문자 관련 편의 기능
#objects : 객체 관련 기능 제공
#bools : boolean 관련 기능 제공
#arrays : 배열 관련 기능 제공
#lists , #sets , #maps : 컬렉션 관련 기능 제공
#ids : 아이디 처리 관련 기능 제공, 뒤에서 설명
```
스프링 부트 타임리프를 사용하면 자바8 날짜 객체도 추가됨

-단순한 URL
@{/hello} /hello

-쿼리 파라미터
```
@{/hello(param1=${param1}, param2=${param2})}
/hello?param1=data1&param2=data2
```
() 에 있는 부분은 쿼리 파라미터로 처리된다.


-경로 변수
```
@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}
/hello/data1/data2
```
URL 경로상에 변수가 있으면 () 부분은 경로 변수로 처리된다.


-경로 변수 + 쿼리 파라미터
```
@{/hello/{param1}(param1=${param1}, param2=${param2})}
/hello/data1?param2=data2
```
경로 변수와 쿼리 파라미터를 함께 사용할 수 있다.

-상대경로, 절대경로, 프로토콜 기준을 표현할 수 도 있다.
```
/hello : 절대 경로
hello : 상대 경로
```

## 리터럴
```
타임리프 리터럴
문자: 'hello'
숫자: 10
불린: true , false
null: null
```

```
<span th:text="hello">

오류 : <span th:text="hello world!"></span>
문자 리터럴은 원칙상 ' 로 감싸야 한다. 중간에 공백이 있어서
하나의 의미있는 토큰으로도 인식되지 않는다.

수정 : <span th:text="'hello world!'"></span>
이렇게 ' 로 감싸면 정상 동작한다.
```
## 반복

```
반복 상태 유지
<tr th:each="user, userStat : ${users}">
반복의 두번째 파라미터를 설정해서 반복의 상태를 확인 할 수 있습니다.
두번째 파라미터는 생략 가능한데, 생략하면 지정한 변수명( user ) + Stat 가 됩니다.
여기서는 user + Stat = userStat 이므로 생략 가능합니다.
반복 상태 유지 기능
index : 0부터 시작하는 값
count : 1부터 시작하는 값
size : 전체 사이즈
even , odd : 홀수, 짝수 여부( boolean )
first , last :처음, 마지막 여부( boolean )
current : 현재 객체
```

## 주석

1. 표준 HTML 주석
 자바스크립트의 표준 HTML 주석은 타임리프가 렌더링 하지 않고, 그대로 남겨둔다.
2. 타임리프 파서 주석
 타임리프 파서 주석은 타임리프의 진짜 주석이다. 렌더링에서 주석 부분을 제거한다.
3. 타임리프 프로토타입 주석
 타임리프 프로토타입은 약간 특이한데, HTML 주석에 약간의 구문을 더했다.
HTML 파일을 웹 브라우저에서 그대로 열어보면 HTML 주석이기 때문에 이 부분이 웹 브라우저가
렌더링하지 않는다.

타임리프 렌더링을 거치면 이 부분이 정상 렌더링 된다.
쉽게 이야기해서 HTML 파일을 그대로 열어보면 주석처리가 되지만, 타임리프를 렌더링 한 경우에만
보이는 기능이다.

## 템플릿 조각

웹 페이지를 개발할 때는 공통 영역이 많이 있다. 예를 들어서 상단 영역이나 하단 영역, 좌측 카테고리 등등
여러 페이지에서 함께 사용하는 영역들이 있다. 이런 부분을 코드를 복사해서 사용한다면 변경시 여러
페이지를 다 수정해야 하므로 상당히 비효율 적이다. 타임리프는 이런 문제를 해결하기 위해 템플릿 조각과
레이아웃 기능을 지원한다.

th:fragment 가 있는 태그는 다른곳에 포함되는 코드 조각으로 이해하면 된다.
template/fragment/footer :: copy
 template/fragment/footer.html 템플릿에 있는 th:fragment="copy" 라는 부분을
템플릿 조각으로 가져와서 사용한다는 의미이다.

common_header(~{::title},~{::link}) 이 부분이 핵심이다.
::title 은 현재 페이지의 title 태그들을 전달한다.
::link 는 현재 페이지의 link 태그들을 전달한다.
결과를 보자.
메인 타이틀이 전달한 부분으로 교체되었다.
공통 부분은 그대로 유지되고, 추가 부분에 전달한 <link> 들이 포함된 것을 확인할 수 있다.
이 방식은 사실 앞서 배운 코드 조각을 조금 더 적극적으로 사용하는 방식이다. 쉽게 이야기해서 레이아웃
개념을 두고, 그 레이아웃에 필요한 코드 조각을 전달해서 완성하는 것으로 이해하면 된다.

layoutFile.html 을 보면 기본 레이아웃을 가지고 있는데, <html> 에 th:fragment 속성이 정의되어
있다. 이 레이아웃 파일을 기본으로 하고 여기에 필요한 내용을 전달해서 부분부분 변경하는 것으로
이해하면 된다.
layoutExtendMain.html 는 현재 페이지인데, <html> 자체를 th:replace 를 사용해서 변경하는 것을
확인할 수 있다. 결국 layoutFile.html 에 필요한 내용을 전달하면서 <html> 자체를
layoutFile.html 로 변경한다.